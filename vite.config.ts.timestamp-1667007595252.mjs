// vite.config.ts
import { defineConfig, loadEnv } from "vite";

// build/utils.ts
function handleEnv(envConfigs) {
  const {
    VITE_SERVER_PORT,
    VITE_PROXY
  } = envConfigs;
  const proxy = VITE_PROXY ? JSON.parse(VITE_PROXY.replace(/'/g, '"')) : [];
  const res = {
    VITE_SERVER_PORT: Number(VITE_SERVER_PORT) || 8080,
    VITE_PROXY: proxy
  };
  return res;
}

// build/vite/proxy.ts
function createProxy(list = []) {
  const res = {};
  for (const [prefix, target] of list) {
    res[`^${prefix}`] = {
      target,
      changeOrigin: true,
      rewrite: (path) => path.replace(new RegExp(`^${prefix}`), "")
    };
  }
  return res;
}

// build/plugins/index.ts
import { presetUno, presetAttributify, presetIcons } from "unocss";

// build/plugins/pages.ts
import Pages from "vite-plugin-pages";
function configPageImportPlugin() {
  return [
    Pages({
      resolver: "react",
      importMode: "sync",
      routeStyle: "next",
      extensions: ["tsx", "jsx"],
      exclude: [
        "**/components/**/*",
        "**/utils/**/*",
        "**/lib/**/*",
        "**/hooks/**/*",
        "**/model.tsx",
        "**/tests/**/*",
        "**/__test__/**/*"
      ]
    })
  ];
}

// build/plugins/index.ts
import { visualizer } from "rollup-plugin-visualizer";
import react from "@vitejs/plugin-react";
import Unocss from "unocss/vite";
import viteCompression from "vite-plugin-compression";
function createVitePlugins() {
  const vitePlugins = [
    react(),
    Unocss({
      presets: [
        presetUno(),
        presetAttributify(),
        presetIcons()
      ]
    }),
    visualizer({
      gzipSize: true,
      brotliSize: true
    }),
    viteCompression(),
    configPageImportPlugin()
  ];
  return vitePlugins;
}

// build/vite/build.ts
function buildOptions() {
  return {
    chunkSizeWarningLimit: 1e3,
    rollupOptions: {
      output: {
        chunkFileNames: "assets/js/[name]-[hash].js",
        entryFileNames: "assets/js/[name]-[hash].js",
        assetFileNames: "assets/[ext]/[name]-[hash].[ext]",
        manualChunks(id) {
          if (id.includes("node_modules")) {
            const pnpmName = id.includes(".pnpm") ? ".pnpm/" : "";
            const fileName = `node_modules/${pnpmName}`;
            return id.split(fileName)[1].split("/")[0];
          }
        }
      }
    }
  };
}

// vite.config.ts
var vite_config_default = defineConfig(({ mode }) => {
  const root = process.cwd();
  const env = loadEnv(mode, root);
  const viteEnv = handleEnv(env);
  const { VITE_SERVER_PORT, VITE_PROXY } = viteEnv;
  return {
    plugins: createVitePlugins(),
    resolve: {
      alias: {
        "@": "/src",
        "#": "/types"
      }
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true
        }
      }
    },
    server: {
      open: true,
      port: VITE_SERVER_PORT,
      proxy: createProxy(VITE_PROXY)
    },
    esbuild: {
      pure: ["console.log", "debugger"]
    },
    build: buildOptions()
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
