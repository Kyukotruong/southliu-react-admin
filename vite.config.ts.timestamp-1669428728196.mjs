// vite.config.ts
import { defineConfig, loadEnv } from "file:///D:/case/react-admin/node_modules/.pnpm/vite@3.2.4_mp5lu76ee5qtwstsyca37sdhqi/node_modules/vite/dist/node/index.js";

// build/utils.ts
function handleEnv(envConfigs) {
  const {
    VITE_SERVER_PORT,
    VITE_PROXY
  } = envConfigs;
  const proxy = VITE_PROXY ? JSON.parse(VITE_PROXY.replace(/'/g, '"')) : [];
  const res = {
    VITE_SERVER_PORT: Number(VITE_SERVER_PORT) || 8080,
    VITE_PROXY: proxy
  };
  return res;
}

// build/vite/proxy.ts
function createProxy(list = []) {
  const res = {};
  for (const [prefix, target] of list) {
    res[`^${prefix}`] = {
      target,
      changeOrigin: true,
      rewrite: (path) => path.replace(new RegExp(`^${prefix}`), "")
    };
  }
  return res;
}

// build/plugins/index.ts
import { presetUno, presetAttributify, presetIcons } from "file:///D:/case/react-admin/node_modules/.pnpm/unocss@0.45.30_vite@3.2.4/node_modules/unocss/dist/index.mjs";

// build/plugins/pages.ts
import Pages from "file:///D:/case/react-admin/node_modules/.pnpm/vite-plugin-pages@0.26.0_vite@3.2.4/node_modules/vite-plugin-pages/dist/index.mjs";
function configPageImportPlugin() {
  return [
    Pages({
      resolver: "react",
      importMode: "sync",
      routeStyle: "next",
      extensions: ["tsx", "jsx"],
      exclude: [
        "**/components/**/*",
        "**/utils/**/*",
        "**/lib/**/*",
        "**/hooks/**/*",
        "**/model.tsx",
        "**/tests/**/*",
        "**/__test__/**/*"
      ]
    })
  ];
}

// build/plugins/index.ts
import { visualizer } from "file:///D:/case/react-admin/node_modules/.pnpm/rollup-plugin-visualizer@5.8.3/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
import react from "file:///D:/case/react-admin/node_modules/.pnpm/@vitejs+plugin-react@2.2.0_vite@3.2.4/node_modules/@vitejs/plugin-react/dist/index.mjs";
import Unocss from "file:///D:/case/react-admin/node_modules/.pnpm/unocss@0.45.30_vite@3.2.4/node_modules/unocss/dist/vite.mjs";
import viteCompression from "file:///D:/case/react-admin/node_modules/.pnpm/vite-plugin-compression@0.5.1_vite@3.2.4/node_modules/vite-plugin-compression/dist/index.mjs";
function createVitePlugins() {
  const vitePlugins = [
    react(),
    Unocss({
      presets: [
        presetUno(),
        presetAttributify(),
        presetIcons()
      ]
    }),
    visualizer({
      gzipSize: true,
      brotliSize: true
    }),
    viteCompression(),
    configPageImportPlugin()
  ];
  return vitePlugins;
}

// build/vite/build.ts
function buildOptions() {
  return {
    chunkSizeWarningLimit: 1e3,
    rollupOptions: {
      output: {
        chunkFileNames: "assets/js/[name]-[hash].js",
        entryFileNames: "assets/js/[name]-[hash].js",
        assetFileNames: "assets/[ext]/[name]-[hash].[ext]",
        manualChunks(id) {
          if (id.includes("node_modules")) {
            const pnpmName = id.includes(".pnpm") ? ".pnpm/" : "";
            const fileName = `node_modules/${pnpmName}`;
            return id.split(fileName)[1].split("/")[0];
          }
        }
      }
    }
  };
}

// vite.config.ts
var vite_config_default = defineConfig(({ mode }) => {
  const root = process.cwd();
  const env = loadEnv(mode, root);
  const viteEnv = handleEnv(env);
  const { VITE_SERVER_PORT, VITE_PROXY } = viteEnv;
  return {
    plugins: createVitePlugins(),
    resolve: {
      alias: {
        "@": "/src",
        "#": "/types"
      }
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true
        }
      }
    },
    server: {
      open: true,
      port: VITE_SERVER_PORT,
      proxy: createProxy(VITE_PROXY)
    },
    esbuild: {
      pure: ["console.log", "debugger"]
    },
    build: buildOptions()
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
